//Without Overlapping

	AREA sam,CODE,READONLY
	LDR r0,=0x40000000;
	LDR r1,=0x40000050;
	LDR r2,[r0],#0x4;
L	LDR r3,[r0],#0x4;
	STR r3,[r1],#0x4;
	SUBS r2,r2,#01;
	BNE L
	end

//With Overlap

	AREA sam,CODE,READONLY
start
	LDR r0,=0x40000000 
	LDR r2,[r0],#0x4 
	add r3,r0,r2, LSL #2 
L 	ldr r4,[r0],#0x4 
	str r4,[r3],#0x4 
	subs r2,r2,#01 
	BNE L 
l 	B l
end

// ax^2 + bx + c

	AREA quadexp,CODE,READONLY ; ax^2 + bx + c
	
	LDR r0,=0x40000000
	LDM r0,{r1-r4} ; r1,r2,r3,r4 -> x,a,b,c
	MUL r5,r1,r1 ;
	MUL r2,r5,r2 ;
	MUL r1,r3,r1 ;
	ADD r1,r1,r2 ;
	ADD r1,r1,r4 ;
	str r1,[r0,#0x10]
l	b l
	END

//b^2 - 4ac 

	AREA rootexp,CODE,READONLY ; b^2 - 4ac 
	LDR r0,=0x40000000 
	LDM r0,{r1-r3}
	MUL r4,r2,r2
	LSL r1,#2
	MUL r5,r1,r3
	SUB r6,r4,r5
	STR r6,[r0,#0x0c]
l	b l
	END

//Bubble Sort

		AREA sort, CODE, READONLY

start
    ldr r0, =0x40000000    ; Load the memory address of the array into r0
    ldr r1, [r0]           ; Load the number of elements into r1

outerLoop
    mov r2, r1             ; Copy the number of elements to r2 for the inner loop counter
    ldr r3, =0x40000004    ; Load the address of the first element into r3

innerLoop
    ldr r4, [r3]           ; Load current element
    ldr r5, [r3],#0x4      ; Load next element and increment pointer

    cmp r4, r5
    ble continueLoop       ; If r4 <= r5, continue

    str r4, [r3]           ; Store next element in the current position
    str r5, [r3, #-0x4]      ; Store current element in the next position

continueLoop
    subs r2, r2, #1        ; Decrement the inner loop counter
    bne innerLoop          ; Repeat inner loop if counter is not zero

    subs r1, r1, #1        ; Decrement the outer loop counter
    bne outerLoop          ; Repeat outer loop if counter is not zero

l   b l                    ; Branch to the end of the program

end


//Binary Search

	AREA binary , CODE , READONLY 
	
	LDR r0,= 0x40000000 ;
	MOV r13,#0x00 ;
	LDRB r1,[r0] ;
	LDRB r2,[r0,#0x01]! ;
	MOV r3 ,#0x00 ;
	MOV r4,r1 ;
	
rep CMP r3,r4
	BGT exit 
	ADD r5,r3,r4
	LSR r5,#0x01 
	LDRB r7,[r0,r5]
	CMP r7,r2
	BGE HE
	ADD r3,r5,#0x01 ;
	B rep
	
HE 	BEQ found 
	SUB r4,r5,#0x01 
	B rep

found	MOV r13,#0x11
exit
L	B L
	END
