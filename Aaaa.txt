1) First,  Create virtual environment using DOS commands in DOS PROMPT.
2) Second, Create Project
3) Third,  Create application
4) Fourth,  View.py

   type following code in view.py
	
	from django.http import HttpResponse

	def myView(request):
    	    return HttpResponse("hi , this is our first django message on browser")
	--------------------------------------
	def index(request):
    	    x = []
    	    for i in range(10):
                x.append(i)
    	    return HttpResponse("<h1> elements are </h1> : List of values {0}".format(x))
	-----------------------------------------
5) within Application -->>create urls.py  file under webApp folder: and fill the following content
	from django.urls import path
	from . import views

	urlpatterns = [
    path('', views.index, name='index'),
	]

6)root folder (ProjectSite)-->> open urls.py  file
	from django.contrib import admin
	from django.urls import include, path

	urlpatterns = [
    		path('', include('myApp.urls')),
    		path('admin/', admin.site.urls),
	]

----------------------------------------------------------------------------------------------------------------------------
Note: create a folder "templates" in your web Application folder (eg: myProject\myApp\templates\myfirst.html)

1) myfirst.html

<!DOCTYPE html>
<html>
<body>

<h1 style="color:blue">Hello World!</h1>
<p style="color:orange">Welcome to my first Django project!</p>
<form>
Enter your name  <input type="text" id="txt1" name="txt1" value="this text will be modified">
<input type="button" onclick="show()" value="click me">
</form> 
<script>
function show()
{
document.getElementById("txt1").value="text changed" ;
}
</script>
</body>
</html> 

2) view.py (import the render and loader in the view.py file)

from django.shortcuts import render

# Create your views here.
from django.http import HttpResponse
from django.template import loader

3) #include the following function to render your html file (if index already exist, then give 
some other name for the function

def showPage(request):
    template = loader.get_template('myfirst.html')
    return HttpResponse(template.render())

4) open urls.py from application folder and include path reference for newly added function(showPage)

	urlpatterns = [
	    path('', views.showme, name='showme'),
	    path('myapp/', views.loop, name='loop'),
	    path('showPage', views.showPage, name='showPage'),
	]


5) settings.py (goto INSTALLED_APPS, include your application name)
	'myapp'

6) run server 
   python manage.py runserver

7) in the browser type the path name (function mapped with html page)
   eg: http://127.0.0.1:8000/showPage
----------------------------------------------------------------------------------------------------------------------------
How to create a table/db in Django:

1) Open models.py file and code the following:

from django.db import models

class Employee(models.Model):
	empNo = models.IntegerField()
	empName = models.CharField(max_length=20)
	empSalary = models.IntegerField()
	empAddress = models.CharField(max_length=100)

2) python manage.py makemigrations myapp

(the above command get ready the db by creating sql query for creating its table and also our table)


3) Now use the following command to create the table:

   python manage.py migrate

   Note: the above command actually execute the SQL query.

4) Now we can use the following command to confirm how the table is created:

   python manage.py sqlmigrate myapp 0001

5) To use the table we have created, that to be registered with admin.py:

   from django.contrib import admin
   from appname.models import tablename  # from myapp.models import Employee
   admin.site.register(tablename)

6) you can create a superuser to access adminapp by using the following:

	python manage.py createsuperuser
	Username:
	Email address:
	Password:
	Password (again):

	Superuser created successfully.

7) further we have to run the server to access admin page:

   python manage.py runserver

   now go to browser and type the following command:

   http://127.0.0.1:8000/

8) now you will be getting the admin login page, login with the credentials(superuser we have created).

9) Now go to views.py file and write the following function:

   from django.shortcuts import render
   from HelloWorld.models import Employee
   from .models import Employee              #(import your Table)

   def empDetails(request):
       emp_data = Employee.objects.all()
       emp_dict = {'emp_list':emp_data}
       return render(request,'employee.html', context=emp_dict)


10) Now, Create myapp/templates/employee.html file and update the following code:
<!DOCTYPE html>
<html>
<head>
    <title>Employee List</title>
</head>
<body>
{% if emp_list %}
<table>
{% for employee in emp_list %}

<tr>
<td>{{employee.empNo}}</td>
<td>{{employee.empName}}</td>
<td>{{employee.empSalary}}</td>
<td>{{employee.empAddress}}</td>
</tr>

{% endfor %}
{% endif %}
</table>
</body>

11) now update url.py of application folder with the following:

from myapp import views

urlpatterns = [
path('admin/',admin.site.urls),
path('employee/',views.empDetails, name='employee'),

]

12) open settings.py and dont delete any other details, 
	map your application/templates folder path in the existing TEMPLATES

TEMPLATES = [
    {
	'DIRS': [BASE_DIR / 'myapp/templates'],
	...
	...
     }
  ]

13) runserver
14) type 'employee/' in the localhost
---------------------------------------------------------------------------------------------------------------------------
Add Records (Assuming, Employee table created in models.py)

1) To open a Python shell, type this command:

	py manage.py shell

2) We are in the shell, type the following command after >>>
   
    >>> from myapp.models import Employee 

3) Hit [enter] and write this to look at the empty Member table:
 
   >>> Employee.objects.all()

    ---This should give you an empty QuerySet object, like this:
   <QuerySet []>

4) Add a record to the table, by executing these two lines:

>>> emp = Employee(empNo='1101', empName='Kavin', empSalary='90000', empAddress='thanjavur')
>>> emp.save()
Execute this command to see if the Employee table got a emp:

5) to view all employee objects from Employee 
>>> Employee.objects.all().values()

-------------------------------------------------------------------------------------------------------------------------
Create an HTML form and Insert Data into the Database using Django:

There are multiple steps involved. Let’s start one-by-one.

Step 1. Creating a Model Class
Step 2. Understanding Different Model Field Types
Step 3. Making Migrations and Setting Database
Step 4. Create Form to Take the User Input
Step 5. Set URL and Run Django Application

Step 1. Creating a Model Class
==============================
Model is nothing but the source of information about the data where we can define the type of data, behavior.

Usually, one model class maps to one database table.

You can found all the defined models in models.py file.

Open models.py and write model class in it.

from django.db import models
class Employee(models.Model):
    empNo = models.IntegerField()
    empName = models.CharField(max_length=100)
    empSalary = models.IntegerField()
    empAddress = models.CharField(max_length=200)

Explanation:

In the first line of the code, we are importing models.

Create a new form (says Employee) that is inherited from the models.Model class.

One-by-on you can define the form data/field with their data types.

In the above example, we have created four model data fields – IntegerField(), CharField(), IntegerField() and CharField
--------------------------------------------------------------------------

Step 2. Understanding Different Model Field Types
=================================================
There are different model field types you can use in the Django models. Most of these field types are self-descriptive.

Let’s check them one-by-one.

Field Name	Description
AutoField	It is an IntegerField that automatically increments for 			each entry.
CharField	It is used to store the set of characters (string). You 			can limit the number of characters.
IntegerField	As name resonates, it is an integer field. It can accept 			the values in a range of -2147483648 to 2147483647 (up to 			32 bits).
--------------------------------------------------------------------------
Step 3. Making Migrations and Setting Database
==============================================
After writing Django model, you need to create the migrations. Run following command to create the migrations.

python manage.py makemigrations

After running the command, you can see the migrations file created under the migrations folder. Something like this 0001_initial.py.

You are done with creating migrations. To reflect thing migrations into the database, you have to run below command.

python manage.py migrate

You have applied migrations to the database successfully.

With this, you are have created backend.

Let’s create the front-end (form) to take the data from user.
--------------------------------------------------------------------------
Step 4. Create Form to Take the User Input
==========================================
Instead of creating HTML form manually, Django has its easy way of doing it.

First of all, create new file as forms.py and write below Python code.

We are defining the form and attributes to display in the form.

from django import forms
from .models import Employee
class Employee_form(forms.ModelForm):
    class Meta:
        model = Employee
        fields = ["empNo", "empName", "empSalary", "empAddress", ]
        labels = {"empNO": "EmpNo", "empName": "EmpName", "empSalary": 			"EmpSalary", "empAddress": "EmpAddress", }


Here are the things we are doing.

Inheriting forms.ModelForm class to create our own form.

In Meta class, we are defining the form attributes.

With the labels, we can customize form field labels to display.

Now create insert.html HTML page and save the file template to display Django form.

<div class="container">
    <form method="POST">
      <fieldset>
        <legend>Form</legend>
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Submit</button>
      </fieldset>
    </form>
</div>
Let’s  as  in templates directory.

You can also use bootstrap to customize the form and to make it look nice. Now stick with this and continue with our tutorial to create an HTML form and insert data into the database using Django.

Note:Bootstrap is an HTML, CSS & JS Library that focuses on simplifying the development of informative web pages (as opposed to web apps). The primary purpose of adding it to a web project is to apply Bootstrap's choices of color, size, font and layout to that project.

Now create a new function in views.py Python file.

def insert_form(request):
    if request.method == "POST":
        form = Employee_form(request.POST)
        if form.is_valid():
            form.save()
    else:
        form = Employee_form()
    return render(request, 'insert.html', {'form': form})
--------------------------------------------------------------------------
Step 5. Set URL and Run Django Application
==========================================
Let’s call this form function by mapping it to the URL. 
Go to the urls.py and add below line of code in urlpatterns list.

path('insert', views.insert_form, name='insert'),

Now run and start the local server to test using below command.

python manage.py runserver

It will start the local server. Now open localhost in web browser.

Whenever a request comes to http://localhost:8000/HelloWorld/form, it will call to the insert_form() function defined in views.

----------------------------------------------------------------------------------------------------------------------------
To create a Django form to capture a Employee's empNo, empName, empSalary, empAddress and store them in a model, you need to follow these steps: (Assuming Employee table created in models.py)

1. Create a Django Form
   create a Django form to handle the input. You can either create a form manually or use a ModelForm, which     
    automatically generates the form based on the model.

# forms.py
from django import forms
from .models import Employee

class EmpoyeeForm(forms.ModelForm):
    class Meta:
        model = Employee
        fields = ['empNo', 'empName', 'empSalary', 'empAddress']
        widgets = {
            'empNo': forms.TextInput(attrs={'placeholder': 'Enter empID'}),
            'empName': forms.TextInput(attrs={'placeholder': 'Enter empName'}),
            'empSalary': forms.TextInput(attrs={'placeholder': 'Enter empSalary'}),
            'empAddress': forms.TextInput(attrs={'placeholder': 'Enter empAddress'}),
        }

2.  add the following method in the views.py file and import the following:

from django.shortcuts import render, redirect
from .forms import EmployeeForm

def employee_registration(request):
    if request.method == 'POST':
        form = EmployeeForm(request.POST)
        if form.is_valid():
            form.save()  # This saves the data to the database
            return redirect('success')  # Redirect to a success page
    else:
        form = EmployeeForm()

    return render(request, 'employee_form.html', {'form': form})

3.  Create an HTML template to display the form. Create a new file employee_form.html in your templates folder.

<!-- employee_form.html -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Registration</title>
</head>
<body>
    <h2>Employee Registration</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Submit</button>
    </form>
</body>
</html>

4.   Add the following import statement & pattern in the urls.py file (application folder)

from django.shortcuts import render
  
urlpatterns = [
    path('register/',views.employee_registration, name='register'),
    path('success/', lambda request: render(request, 'success.html'), name='success'),
]

 
5.   Create an HTML file "success.html" in the template.

<!-- success.html -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Success</title>
</head>
<body>
    <h2>Registration Successful!</h2>
    <p>Thank you for registering.</p>
</body>
</html>

5.   Runserver     

----------------------------------------------------------------------------------------------------------------------
Template Variables
In Django templates, you can render variables by putting them inside {{ }} brackets:

1) 
templates/template.html:
<!DOCTYPE html>
<html>
<body>

<h1>Hello {{ firstname }}, how are you?</h1>

<p>In views.py you can see how to create the variable.</p>
<p>In template.html you can see how to use the variable.</p>

</body>
</html> 

2)
views.py

from django.http import HttpResponse
from django.template import loader

def testing(request):
  template = loader.get_template('template.html')
  context = {
    'firstname': 'Linus',
  }
  return HttpResponse(template.render(context, request))         

--------------------------------------------------------------------------------------------------------------------
1. Django Model
Assume we have a model called Item with fields like name, price, and description.
from django.db import models

class Item(models.Model):
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()

    def __str__(self):
        return self.name

2. Django Form
Now, create a Django form to update the record. You can use ModelForm to map the model to a form.
from django import forms
from .models import Item

class ItemForm(forms.ModelForm):
    class Meta:
        model = Item
        fields = ['name', 'price', 'description']

3. Django View to Handle the Update
In your views, create a function to handle the update of an existing record.
from django.shortcuts import render, get_object_or_404, redirect
from .models import Item
from .forms import ItemForm

def update_item(request, item_id):
    # Get the item or return 404 if not found
    item = get_object_or_404(Item, pk=item_id)

    # Check if the form is submitted
    if request.method == 'POST':
        # Bind the form with POST data and the existing item instance
        form = ItemForm(request.POST, instance=item)
        if form.is_valid():
            # Save the form to update the item
            form.save()
            return redirect('item_detail', item_id=item.id)  # Redirect to detail view after updating
    else:
        # Initialize the form with the existing item data
        form = ItemForm(instance=item)

    return render(request, 'update_item.html', {'form': form})

4. Template (HTML)
Now, create a simple HTML template update_item.html to display the form.
<!DOCTYPE html>
<html>
<head>
    <title>Update Item</title>
</head>
<body>
    <h1>Update Item</h1>

    <form method="POST">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Update</button>
    </form>
</body>
</html>

5. URL Configuration
Define the URL pattern that will map to the update view.
from django.urls import path
from . import views

urlpatterns = [
    path('item/update/<int:item_id>/', views.update_item, name='update_item'),
]

  A ModelForm is created to update an Item model.
  The view update_item fetches an existing record, populates the form, and saves changes.
  The HTML template renders the form for updating the item.
  URL routing connects the view to a specific URL for item updates.


