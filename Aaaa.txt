//LED using GPIO//

#include<LPC21xx.h>
void delay()
{
	int i,j;
	for(i=0;i<1000;i++)
	{
		for(j=0;j<1000;j++){}
	}
}
int main()
{
	IODIR1 = 0x00ff0000;
	while(1)
	{
		IOSET1 = 0x00550000;
		delay();
		IOCLR1 = 0x00550000;
		delay();
		IOSET1 = 0x00aa0000;
		delay();
		IOCLR1 = 0x00aa0000;
	}
}
		
------------------------------------------------------------------------------------------------------------------------ 

// LED using Switch //

#include<LPC21xx.h>
void delay()
{
	int i,j;
	for(i=0;i<1000;i++)
	{
		for(j=0;j<1000;j++){}
	}
}
int main()
{
	IODIR0 = 0x00000000;
	IODIR1 = 0x00ff0000;
	while(1)
	{
		if(IO0PIN & 0x00004000)
		{
			IOSET1 = 0x00550000;
			delay();
			IOCLR1 = 0x00550000;
			delay();
		}
		else
		{
			IOSET1 = 0x00aa0000;
			delay();
			IOCLR1 = 0x00aa0000;
			delay();
	 }
	}
}
		

-------------------------------------------------------------------------------------------------------------------------

// TIMER ///

#include<lpc214x.h>
void delay(unsigned int a);
void pll();
int main(void)
{
	IO1DIR=0XFFFFFFFF;
	pll();
	while(1)
	{
		IO1SET=0XFFFFFFFF;
		delay(1000);
		IO1CLR=0XFFFFFFFF;
		delay(1000);
	}
}
void pll()
{
	PLL0CON=0X01;
	PLL0CFG=0X24;
	PLL0FEED=0Xaa;
	PLL0FEED=0X55;
	while(!PLL0STAT & (1<<10));
	PLL0CON=0X03;
	PLL0FEED=0Xaa;
	PLL0FEED=0X55;
	VPBDIV=0X01;
}
void delay(unsigned int x)
{
	T0CTCR=0X0;
	T0TCR=0X00;
	T0PR=59999;
	T0TCR=0X02;
	T0TCR=0X01;
	while(T0TC<x);
	T0TCR=0X00;
	T0TC=0;
}


-------------------------------------------------------------------------------------------------------------------------

// UART // 

#include<LPC214X.h>
void pll()
{
	 PLL0CON=0X01;
	 PLL0CFG=0X24;
	 PLL0FEED=0XAA;
	 PLL0FEED=0X55;
	 while(!(PLL0STAT & (1<<10)));
	 PLL0CON=0X03;
	 PLL0FEED=0XAA;
	 PLL0FEED=0X55;
	 VPBDIV=0X01;
 }
 
 int main()
 {
	  int C;
	  PINSEL0=0X00000005;
	  U0LCR=0X83;
	  U0DLL=0X87;
	  U0DLM=0X01;
	  U0LCR=0X03;
	  pll();
	  while(1)
	  {
		   while(! (U0LSR & 0X01));
		   C=U0RBR;
		   C=C+1;
		   while(! (U0LSR & 0X20));
		   U0THR=C;
	   }
 }


-------------------------------------------------------------------------------------------------------------------------

// ADC //

#include<lpc214x.h>

int main()
{
	unsigned int val;
	val=0x000003ff;
	PINSEL1=0X01000000;
	SCS=0X02;
	FIO1MASK=0XFF00FFFF;
	FIO1DIR=0X00FF0000;
	FIO1PIN=0X00000000;
	AD0CR=0X00200E02;
	while(1)
	{
		AD0CR|=0X01000000;
		do
		{
		val=AD0DR1;
		}
		while((val&0X80000000)==0);
		FIO1PIN=(val<<8);
	}
	 return 0;
}


-------------------------------------------------------------------------------------------------------------------------

// Interrupt //

#include<lpc214x.h>
void delay(void);
void ext_int_init();
void Ext_ISR(void);
int main(void)
{
	IODIR0=0X00000000;
	IO1DIR=0X00FF0000;
	ext_int_init();
	while(1)
	{
		IO1SET=0X00FF0000;
		delay();
		IO1CLR=0X00FF0000;
		delay();
	}
}
void ext_int_init()
{
	EXTMODE=0X2;
	EXTPOLAR&=~(0X2);
	PINSEL0=0X20000000;
	VICIntSelect &= ~(1<<15);
	VICVectAddr5=(unsigned int)Ext_ISR;
	VICVectCntl5=(1<<5)|15;
	VICIntEnable=(1<<5);
}
void Ext_ISR(void)
{
	IO1SET=0X00550000;
	delay();
	IO1CLR=0X00550000;
	EXTINT |=0X2;
	VICVectAddr=0;
}
void delay()
{
	int i,j;
	for(i=0;i<4000;i++)
	{
		for(j=0;j<4000;j++)
		{
		}
	}
}

/*

#include<LPC214X.h>
void delay(void);
__irq void Ext(void)
{
	int i=5;
	while(i)
	{
		IO1SET=0X00550000;
		delay();
		IO1CLR=0X00550000;
		delay();
		i--;
	}
	EXTINT |=0X02;
	VICVectAddr=0;
}
void ext()
{
	EXTMODE=0X02;
	EXTPOLAR &=~(0X02);
	PINSEL0=0X20000000;
	VICIntSelect &=~(1<<15);
	VICVectAddr5=(unsigned int)Ext;
	VICVectCntl5=(1<<5)| 15;
	VICIntEnable=(1<<15);
}
int main(void)
{
	IO0DIR=0X00000000;
	IO1DIR=0X00FF0000;
	ext();
	while(1)
	{
		IO1SET=0X00FF0000;
		delay();
		IO1CLR=0X00FF0000;
		delay();
	}
}
void delay()
{
	int i,j;
	for(i=0;i<1000;i++)
		for(j=0;j<1000;j++);
}
*/
-------------------------------------------------------------------------------------------------------------------------

// GPIO// 

/*#include<LPC21XX.h>

void delay()
{
	int i,j;
	for (i=0;i<1000;i++){}
	for (j=0;j<1000;j++){}
}


int main()
{
	PINSEL0=0x00000000;
	IO0DIR=0x00000000;
	while(1)
	{
		IOSET0=0X00005555;
		delay ();
		IOCLR0=0X00005555;
		delay ();
		return 0;
	}
}*/

#include<lpc21xx.h>
void delay(void);
int main()
{
	IODIR0=0xFFFFFFFF;
	while(1)
	{
		IOSET0=0x0F00;
		delay();
		IOCLR0=0x0F00;
		delay();
	}
}

void delay(void)
{
	int i;
	for(i=0;i<=600000;i++);
}


-------------------------------------------------------------------------------------------------------------------------

//Stepper Motor - Clock wise//

#include<lpc214X.h>
unsigned long i;
void delay(unsigned int);
int main()
{
	int a=200;
	IO1DIR=0x00FF0000;
	i=0X00080000;
	while(a)
	{
		IO1SET=i;
		delay(10000);
		IO1CLR=0X00FF0000;
		i=i>>1;
		if(i==0X00008000)
		{
			i=0X00080000;
		}
		a=a-1;
	}
}

void delay(unsigned int count)
{
	unsigned int i,j;
	for(i=0;i<=count;i++)
	for(j=0;j<=89;j++);
}


-------------------------------------------------------------------------------------------------------------------------

// Stepper Motor -anti clock wise//

#include <LPC214X.H> /* For 360 degree, a=200*/

void delay(unsigned int count)
{
  unsigned int i ,j= 0;
  for(i = 0; i <= count; i ++)
  for(j = 0; j <= 80; j ++);
}

unsigned long i;

int main()
{
	int a=200;
  	IODIR1 = 0x00FF0000;
  	i = 0x00010000;
	while(a)
	{
		IO1SET=i;
		delay(10000);
		IO1CLR=0x000F0000;
			i=i<<1;
		//delay(10000);
		if(i==0x00100000)
		{
			i=0x00010000;
		}
		a=a-1;
	}
}

--------------------------------------------------------------------------------

//Without Overlapping

	AREA sam,CODE,READONLY
	LDR r0,=0x40000000;
	LDR r1,=0x40000050;
	LDR r2,[r0],#0x4;
L	LDR r3,[r0],#0x4;
	STR r3,[r1],#0x4;
	SUBS r2,r2,#01;
	BNE L
	end
-----------------------------------------------------------------------------------------------------------
//With Overlap

	AREA sam,CODE,READONLY
start
	LDR r0,=0x40000000 
	LDR r2,[r0],#0x4 
	add r3,r0,r2, LSL #2 
L 	ldr r4,[r0],#0x4 
	str r4,[r3],#0x4 
	subs r2,r2,#01 
	BNE L 
l 	B l
end

-----------------------------------------------------------------------------------------------------------

// ax^2 + bx + c

	AREA quadexp,CODE,READONLY ; ax^2 + bx + c
	
	LDR r0,=0x40000000
	LDM r0,{r1-r4} ; r1,r2,r3,r4 -> x,a,b,c
	MUL r5,r1,r1 ;
	MUL r2,r5,r2 ;
	MUL r1,r3,r1 ;
	ADD r1,r1,r2 ;
	ADD r1,r1,r4 ;
	str r1,[r0,#0x10]
l	b l
	END

-----------------------------------------------------------------------------------------------------------

//b^2 - 4ac 

	AREA rootexp,CODE,READONLY ; b^2 - 4ac 
	LDR r0,=0x40000000 
	LDM r0,{r1-r3}
	MUL r4,r2,r2
	LSL r1,#2
	MUL r5,r1,r3
	SUB r6,r4,r5
	STR r6,[r0,#0x0c]
l	b l
	END

-----------------------------------------------------------------------------------------------------------

//Odd or Even
	AREA EXP3,CODE,READONLY
ENTRY
	LDR r0,=0x40000000;
	LDR r1,[r0],#0x04;
	AND r2,r1,#0x01;
	STR r2,[r0],#0x04;
L	B L;
	END;
	
--------------------------------------------------------------------------------------------------------

//64 bit addition

	AREA EXP4,CODE,READONLY
ENTRY
	LDR r0,=0x40000000;
	LDMIA r0!,{r1-r4};
	ADDS r5,r2,r4;
	ADC r6,r1,r3;
	STMIA r0!,{r5,r6};
L	B L;
	END;


------------------------------------------------------------------------------------------------------------//Fibonacci
	AREA EXP9,CODE,READONLY
ENTRY
	LDR r0,=0x40000000;
	LDR r1,[r0],#0x04;
	MOV r4,#0x00;
	MOV r5,#0x01;
	STR r3,[r0],#0x04;
	STR r4,[r0],#0x04;
	SUB r2,r1,#0x02;
LOOP	CMP r2,r3;
		BEQ EXIT;
		ADD r6,r4,r5;
		MOV r4,r5;
		MOV r5,r6;
		STR r6,[r0],#0x04;
		ADD r3,r3,#0x01;
		B LOOP;
EXIT	
C	B C;
	END;

------------------------------------------------------------------------------------------------------------


//Factorial

	AREA factstack, CODE, READONLY 

    LDR r0, =0x40000000
    LDR r1, [r0]
    MOV r2, #1
    BL lpush          ; Call the function lpush
    STR r2, [r0]
l   B l

lpush
    SUB sp, sp, #8
    STR lr, [sp, #4]
    STR r1, [sp]
    CMP r1, #1
    BGT loop
    B lpop

loop
    SUB r1, r1, #1
    BL lpush          ; Call the function lpush recursively
    B lpop

lpop
    LDR r1, [sp]
    LDR lr, [sp, #4]
    ADD sp, sp, #8
    CMP r1, #0
    MUL r2, r1, r2
    MOV pc, lr

    END

-----------------------------------------------------------------------------------------------------------

//Bubble Sort

;Bubble Sort
	AREA bubble,CODE,READONLY
START
	LDR R0,=0X40000000
	LDR R1,[R0]
OUTER
	MOV R2,R1
	LDR R0,=0X40000004
INNER
	LDR R4,[R0]
	LDR R5,[R0,#04]!
	CMP R4,R5
	BLE CONTINUE
	STR R4,[R0]
	STR R5,[R0,#-0X04]
CONTINUE
	SUBS R2,R2,#01
	BNE INNER
l
	B l
	END

-----------------------------------------------------------------------------------------------------------

//Binary Search

AREA add1, CODE, READONLY
	ENTRY
		LDR r0, =0x40000000
		mov r13, #0x00
		LDRB r1, [r0]        ; Load the number of elements
		LDRB r2, [r0, #0x01] ; Load the search element
		mov r3, #0x02        ; Initialize low index to 3rd index
		add r4, r1, #0x01    ; Initialize high index to index of last element

rep
		cmp r3, r4
		BGT exit
		add r5, r3, r4       ; Calculate mid index
		LSR r5, r5, #0x01    ; Divide by 2 (shift right)
		LDRB r7, [r0, r5]    ; Load the value at the mid index
		cmp r7, r2           ; Compare the value at mid index with the search value
		BGT high             ; If value at mid index > search value, go to high branch

low
		add r3, r5, #0x01    ; Update low index to mid + 1
		B rep                ; Repeat the loop

high
		sub r4, r5, #0x01    ; Update high index to mid - 1
		B rep                ; Repeat the loop

exit
		mov r13, #0x11       ; Set a flag to indicate the value is found
		B L                  ; Exit the loop

L
		b L
		end
-------------------------------------------------------------------------------------------------------------------
//Linear Search

;Linear Search
	AREA linear,CODE,READONLY
START
	LDR R0,=0X40000000
	LDR R5,=0X40000050
	MOV R6,#0XFF
	LDR R1,[R0],#0X04
	LDR R2,[R0],#0X04
REP
	LDR R3,[R0],#0X04
	CMP R3,R1
	BEQ FND
	SUBS R2,R2,#01
	BNE REP
	B STOP
FND	
	MOV R6,#0X11
STOP
	STR R6,[R5]
l
	B l
	END
	
